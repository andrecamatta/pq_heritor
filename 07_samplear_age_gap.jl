#!/usr/bin/env julia
# M√≥dulo de Amostragem de Age Gap para Monte Carlo
#
# Uso: Fun√ß√£o heritor - estimar idade do c√¥njuge benefici√°rio de pens√£o
#
# Baseado em an√°lise de distribui√ß√£o (09a_analise_distribuicao_age_gap.jl):
# - Curtose alta (2-7) ‚Üí caudas pesadas
# - Maioria dos testes rejeita normalidade
# - Recomenda√ß√£o: t-Student > Normal

using CSV
using DataFrames
using Distributions
using Statistics
using Random

println("=" ^ 70)
println("M√ìDULO DE AMOSTRAGEM: AGE GAP")
println("=" ^ 70)

# ============================================================================
# CARREGAR DADOS SUAVIZADOS
# ============================================================================

RESULTADOS_DIR = "resultados"
arquivo_age_gap = joinpath(RESULTADOS_DIR, "age_gap_credivel.csv")

if !isfile(arquivo_age_gap)
    println("\nERRO: Arquivo n√£o encontrado: $arquivo_age_gap")
    println("Execute primeiro: julia 09_age_gap_servidores.jl")
    exit(1)
end

println("\nCarregando par√¢metros suavizados...")
df_age_gap = CSV.read(arquivo_age_gap, DataFrame)

# Criar dicion√°rio para lookup r√°pido: (idade, sexo) => (Œº, œÉ)
PARAMS_DICT = Dict{Tuple{Int, String}, Tuple{Float64, Float64}}()

for row in eachrow(df_age_gap)
    if !ismissing(row.agegap_suavizado) && !ismissing(row.sd_suavizado)
        key = (row.idade, row.sexo)
        Œº = row.agegap_suavizado
        œÉ = row.sd_suavizado
        PARAMS_DICT[key] = (Œº, œÉ)
    end
end

println("‚úì Par√¢metros carregados: $(length(PARAMS_DICT)) combina√ß√µes (idade, sexo)")

# ============================================================================
# FUN√á√ÉO PRINCIPAL: SAMPLEAR AGE GAP
# ============================================================================

"""
    samplear_age_gap(idade::Int, sexo::String, n_samples::Int=10000;
                     distribuicao::Symbol=:tstudent, df_tstudent::Int=5,
                     truncar::Bool=true, idade_min::Float64=15.0, idade_max::Float64=100.0)

Amostra age gap para simula√ß√µes Monte Carlo da fun√ß√£o heritor.

# Argumentos
- `idade`: Idade do servidor (15-90)
- `sexo`: "Masculino" ou "Feminino"
- `n_samples`: N√∫mero de amostras (padr√£o: 10000)
- `distribuicao`: Distribui√ß√£o a usar
  - `:normal` - Normal(Œº, œÉ)
  - `:tstudent` - t-Student com df graus de liberdade (RECOMENDADO)
  - `:empirica` - Amostragem da distribui√ß√£o emp√≠rica (NOT IMPLEMENTED)
- `df_tstudent`: Graus de liberdade para t-Student (padr√£o: 5)
- `truncar`: Truncar distribui√ß√£o para idades REALISTAS? (padr√£o: true)
- `idade_min`: Idade m√≠nima REALISTA do c√¥njuge (padr√£o: 15.0 anos)
  - 15 anos: Idade m√≠nima nos dados PNADC + limite legal brasileiro
- `idade_max`: Idade m√°xima REALISTA do c√¥njuge (padr√£o: 100.0 anos)
  - 100 anos: Limite biol√≥gico razo√°vel

‚ö†Ô∏è IMPORTANTE: `idade_min` e `idade_max` s√£o limites para IDADE DO C√îNJUGE, n√£o age gap!

# Truncamento
Quando `truncar=true` e `distribuicao=:tstudent`:
- t-Student √© truncada ANTES de samplear (n√£o p√≥s-processamento)
- Garante que idade_c√¥njuge ‚àà [idade_min, idade_max]
- M√©todo: Truncated(TDist(df), limites normalizados)
- Impacto: Remove <0.5% de amostras extremas (caudas absurdas)

# Retorna
- `Vector{Float64}`: Amostras de age gap

# Uso atuarial
```julia
# Servidor homem de 60 anos falece
idade_servidor = 60
sexo = "Masculino"

# Monte Carlo: 10k cen√°rios de idade do c√¥njuge
age_gaps = samplear_age_gap(idade_servidor, sexo, 10_000)
idades_conjuge = idade_servidor .- age_gaps

# Estat√≠sticas
println("C√¥njuge esperado:")
println("  M√©dia: \$(mean(idades_conjuge)) anos")
println("  P10: \$(quantile(idades_conjuge, 0.1)) anos")
println("  P50: \$(quantile(idades_conjuge, 0.5)) anos")
println("  P90: \$(quantile(idades_conjuge, 0.9)) anos")

# Usar em fun√ß√£o heritor:
# Para cada idade_conjuge[i]:
#   - Calcular expectativa de vida do benefici√°rio
#   - Calcular valor presente da pens√£o
#   - ...
vp_pensao = mean([calcular_vp(ic) for ic in idades_conjuge])
```

# Fundamenta√ß√£o
Baseado em an√°lise explorat√≥ria (09a_analise_distribuicao_age_gap.jl):
- Curtose: 2-7 (caudas pesadas)
- Testes Anderson-Darling: rejeitam normalidade (p < 0.05) na maioria das faixas
- Recomenda√ß√£o: t-Student (df=5) captura caudas pesadas melhor que Normal

# Refer√™ncias
- An√°lise: resultados/age_gap_diagnostico.txt
- Par√¢metros: resultados/age_gap_credivel.csv (colunas agegap_suavizado, sd_suavizado)
"""
function samplear_age_gap(idade::Int, sexo::String, n_samples::Int=10000;
                          distribuicao::Symbol=:tstudent, df_tstudent::Int=5,
                          truncar::Bool=true, idade_min::Float64=15.0, idade_max::Float64=100.0)

    # Validar inputs
    if !(sexo in ["Masculino", "Feminino"])
        error("Sexo deve ser 'Masculino' ou 'Feminino', recebido: $sexo")
    end

    if idade < 15 || idade > 90
        @warn "Idade fora do intervalo [15, 90]: $idade. Extrapolando..."
    end

    # Obter par√¢metros (Œº, œÉ)
    key = (idade, sexo)

    if !haskey(PARAMS_DICT, key)
        # Idade sem dados: procurar vizinho mais pr√≥ximo
        idades_disponiveis = [k[1] for k in keys(PARAMS_DICT) if k[2] == sexo]

        if isempty(idades_disponiveis)
            error("Nenhum dado dispon√≠vel para sexo=$sexo")
        end

        idade_proxima = idades_disponiveis[argmin(abs.(idades_disponiveis .- idade))]
        @warn "Idade $idade ($sexo) sem dados. Usando idade $idade_proxima."

        key = (idade_proxima, sexo)
    end

    Œº, œÉ = PARAMS_DICT[key]

    # Samplear da distribui√ß√£o escolhida
    if distribuicao == :normal
        # Normal(Œº, œÉ)
        dist = Normal(Œº, œÉ)
        samples = rand(dist, n_samples)

    elseif distribuicao == :tstudent
        # t-Student: X ~ Œº + œÉ * T(df)
        # onde T(df) ~ t-Student com df graus de liberdade

        if truncar
            # Truncar para garantir idades REALISTAS do c√¥njuge
            # idade_c√¥njuge = idade_servidor - age_gap
            # Queremos: idade_min <= idade_c√¥njuge <= idade_max
            # Portanto: idade - idade_max <= age_gap <= idade - idade_min

            age_gap_min = idade - idade_max  # ex: 60 - 100 = -40
            age_gap_max = idade - idade_min  # ex: 60 - 15 = 45

            # Truncar t-Student padronizada
            t_min = (age_gap_min - Œº) / œÉ
            t_max = (age_gap_max - Œº) / œÉ

            # Samplear de t-Student truncada
            dist_t_trunc = Truncated(TDist(df_tstudent), t_min, t_max)
            samples_t = rand(dist_t_trunc, n_samples)
            samples = Œº .+ œÉ .* samples_t
        else
            # Sem truncamento (para compara√ß√£o)
            dist_t = TDist(df_tstudent)
            samples_t = rand(dist_t, n_samples)
            samples = Œº .+ œÉ .* samples_t
        end

    elseif distribuicao == :empirica
        error("Distribui√ß√£o emp√≠rica ainda n√£o implementada")

    else
        error("Distribui√ß√£o desconhecida: $distribuicao. Use :normal, :tstudent ou :empirica")
    end

    return samples
end

# ============================================================================
# FUN√á√ÉO AUXILIAR: IDADE DO C√îNJUGE
# ============================================================================

"""
    samplear_idade_conjuge(idade_servidor::Int, sexo_servidor::String, n_samples::Int=10000;
                           kwargs...)

Amostra IDADE DO C√îNJUGE (n√£o age gap).

Retorna idades do c√¥njuge: idade_servidor - age_gap

# Exemplo
```julia
idade_conjuge = samplear_idade_conjuge(60, "Masculino", 10_000)
```
"""
function samplear_idade_conjuge(idade_servidor::Int, sexo_servidor::String, n_samples::Int=10000;
                                kwargs...)
    age_gaps = samplear_age_gap(idade_servidor, sexo_servidor, n_samples; kwargs...)
    idades_conjuge = idade_servidor .- age_gaps

    return idades_conjuge
end

# ============================================================================
# FUN√á√ÉO AUXILIAR: ESTAT√çSTICAS DA DISTRIBUI√á√ÉO
# ============================================================================

"""
    get_parametros_age_gap(idade::Int, sexo::String)

Retorna par√¢metros (Œº, œÉ) suavizados para idade e sexo.

# Retorna
- `(Œº, œÉ)`: Tupla com m√©dia e desvio-padr√£o suavizados

# Exemplo
```julia
Œº, œÉ = get_parametros_age_gap(60, "Masculino")
println("Age gap esperado: Œº=\$Œº anos, œÉ=\$œÉ anos")
```
"""
function get_parametros_age_gap(idade::Int, sexo::String)
    key = (idade, sexo)

    if !haskey(PARAMS_DICT, key)
        # Procurar vizinho
        idades_disponiveis = [k[1] for k in keys(PARAMS_DICT) if k[2] == sexo]

        if isempty(idades_disponiveis)
            error("Nenhum dado dispon√≠vel para sexo=$sexo")
        end

        idade_proxima = idades_disponiveis[argmin(abs.(idades_disponiveis .- idade))]
        @warn "Idade $idade ($sexo) sem dados. Usando idade $idade_proxima."

        key = (idade_proxima, sexo)
    end

    return PARAMS_DICT[key]
end

# ============================================================================
# EXEMPLO DE USO (se executado diretamente)
# ============================================================================

if abspath(PROGRAM_FILE) == @__FILE__
    println("\n" * "=" ^ 70)
    println("EXEMPLO DE USO")
    println("=" ^ 70)

    # Cen√°rio: Servidor homem de 60 anos falece
    idade_servidor = 60
    sexo_servidor = "Masculino"

    println("\nüìã Cen√°rio:")
    println("  Servidor: $sexo_servidor, $idade_servidor anos")
    println("  Quest√£o: Qual a idade esperada do c√¥njuge benefici√°rio?")

    # Obter par√¢metros
    Œº, œÉ = get_parametros_age_gap(idade_servidor, sexo_servidor)
    println("\nüìä Par√¢metros suavizados:")
    println("  Œº (age gap m√©dio): $(round(Œº, digits=2)) anos")
    println("  œÉ (desvio-padr√£o): $(round(œÉ, digits=2)) anos")

    # Monte Carlo: 10k cen√°rios
    println("\nüé≤ Simula√ß√£o Monte Carlo (10.000 cen√°rios):")

    # Comparar t-Student COM e SEM truncamento
    println("\n  === t-Student (df=5) SEM truncamento ===")
    idades_conjuge_sem_trunc = samplear_idade_conjuge(
        idade_servidor, sexo_servidor, 10_000,
        distribuicao=:tstudent, df_tstudent=5, truncar=false
    )

    println("    Idade do c√¥njuge (anos):")
    println("      M√©dia: $(round(mean(idades_conjuge_sem_trunc), digits=1))")
    println("      Mediana: $(round(median(idades_conjuge_sem_trunc), digits=1))")
    println("      P10: $(round(quantile(idades_conjuge_sem_trunc, 0.10), digits=1))")
    println("      P90: $(round(quantile(idades_conjuge_sem_trunc, 0.90), digits=1))")
    println("      Min/Max: $(round(minimum(idades_conjuge_sem_trunc), digits=1)) / $(round(maximum(idades_conjuge_sem_trunc), digits=1))")

    # Quantos c√¥njuges com idades ABSURDAS?
    prop_absurdo = mean((idades_conjuge_sem_trunc .< 15) .| (idades_conjuge_sem_trunc .> 100)) * 100
    println("      ‚ö†Ô∏è  Probabilidade idade ABSURDA (<15 ou >100): $(round(prop_absurdo, digits=2))%")

    println("\n  === t-Student (df=5) COM truncamento [15, 100] ===")
    idades_conjuge_com_trunc = samplear_idade_conjuge(
        idade_servidor, sexo_servidor, 10_000,
        distribuicao=:tstudent, df_tstudent=5, truncar=true
    )

    println("    Idade do c√¥njuge (anos):")
    println("      M√©dia: $(round(mean(idades_conjuge_com_trunc), digits=1))")
    println("      Mediana: $(round(median(idades_conjuge_com_trunc), digits=1))")
    println("      P10: $(round(quantile(idades_conjuge_com_trunc, 0.10), digits=1))")
    println("      P90: $(round(quantile(idades_conjuge_com_trunc, 0.90), digits=1))")
    println("      Min/Max: $(round(minimum(idades_conjuge_com_trunc), digits=1)) / $(round(maximum(idades_conjuge_com_trunc), digits=1))")
    println("      ‚úì Todas idades entre [15, 100] (REALISTICO)")

    println("\nüìå Impacto do Truncamento:")
    println("  - Remove caudas ABSURDAS (beb√™s como c√¥njuges, 120+ anos)")
    println("  - Afeta apenas ~$(round(prop_absurdo, digits=2))% das amostras")
    println("  - Preserva caudas pesadas dentro de limites biol√≥gicos")
    println("  - RECOMENDADO para c√°lculos atuariais realistas")

    println("\n" * "=" ^ 70)
    println("NEXT STEPS: Usar em fun√ß√£o heritor")
    println("=" ^ 70)

    println("""
Para cada cen√°rio de idade do c√¥njuge:
  1. Calcular expectativa de vida (t√°bua de mortalidade)
  2. Calcular fluxo de pagamentos de pens√£o
  3. Calcular valor presente
  4. M√©dia dos 10k cen√°rios = reserva t√©cnica esperada

Exemplo:
```julia
using ActuarialFunctions  # Ou pacote similar

idades_conjuge = samplear_idade_conjuge(60, "Masculino", 10_000)

vp_pensoes = zeros(10_000)
for (i, idade_conj) in enumerate(idades_conjuge)
    # Expectativa de vida
    ex = expectativa_vida(idade_conj, "Feminino")  # Assumindo servidor homem ‚Üí c√¥njuge mulher

    # Valor presente da pens√£o (simplificado)
    vp_pensoes[i] = calcular_vp_pensao(idade_conj, ex, pensao_anual=12000.0)
end

reserva_esperada = mean(vp_pensoes)
reserva_p90 = quantile(vp_pensoes, 0.90)  # Conservador

println("Reserva t√©cnica esperada: R\$ \$(reserva_esperada)")
println("Reserva t√©cnica P90 (conservador): R\$ \$(reserva_p90)")
```
""")
end
